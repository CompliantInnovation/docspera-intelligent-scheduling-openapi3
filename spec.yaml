openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/DocSpera/patient-survey-api/1.0.0
info:
  description: Intelligent Scheduling Dashboard APIs
  version: "1.0.0-alpha1"
  title: Intelligent Scheduling Dashboard
  x-logo:
    url: https://docspera.com/assets/D3/pic/Logo-Full-White-Padded.png
    backgroundColor: "#0096FA"
    href: https://docspera.com
  contact:
    email: luca@docspera.com
  license:
    name: Proprietary
tags:
  - name: user
    x-displayName: "Authenticated User"
    description: |
      apis available to an authenticated user
paths:
  /api/v1/intelligent-scheduling/policies:
    get:
      tags:
        - user
      summary: Get prioiritization policies
      operationId: getPrioritizationPolicies
      responses:
        '200':
          description: policy list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrioritizationPolicy'
              examples:
                'policy list':
                  summary: policy list
                  value: [{"id":"5efbb8e20e20780692fb71af","title":"Standard","description":"Weighted heaviest equally by Pain, Funcationality, Fall Risk\nFollowed by decreasing weights for Number of Comorbidities, BMI and Days from Surgery","order":1,"category":"Case Urgency"},{"id":"5efbb9024abcf5dfe33c0547","title":"Disability","description":"Equally weighted by Pain, Funcationality and Fall Risk","order":2,"category":"Case Urgency"},{"id":"5efbb93a4ffa754b7270ee3f","title":"Complication","description":"Equally weighted by Age, BMI, and Number of Comorbidities","order":4,"category":"Outpatient"},{"id":"5efbb937a792b1247d81c9bb","title":"Physical Need","description":"Equally weighted by Pain, Funcationality, Fall Risk and Age\nFollowed by lower weight for Days from Surgery","order":3,"category":"Case Urgency"},{"id":"5efbb86ba27c7a558c6e4fff","title":"Days From Surgery","description":"","order":0,"category":"Case Urgency"}]

  /api/v1/intelligent-scheduling/users:
    get:
      tags:
        - user
      summary: Get shared calendar users
      operationId: getSharedCalendarUsers
      responses:
        '200':
          description: user list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScheduleUser'
              examples:
                'user list':
                  summary: user list
                  value: [{"id":111,"name":"Luca Physician","practiceId":212},{"id":212,"name":"Sami Physician","practiceId":212}]

  /api/v1/intelligent-scheduling/preferences/policy:
    get:
      tags:
        - user
      summary: Get prioiritization policy preference
      operationId: getPrioritizationPolicyPreference
      responses:
        '200':
          description: saved policy preference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrioritizationPolicy'
              examples:
                'policy':
                  summary: policy
                  value:
                    {"id": "5efbb86ba27c7a558c6e4fff", "name": "Days From Surgery", "description": "", "category": "Case Urgency"}
    put:
      tags:
        - user
      summary: Save prioiritization policy preference
      operationId: savePrioritizationPolicyPreference
      responses:
        '204':
          description: preference saved
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: policy id
            examples:
              'save policy':
                value: {"id": "5efbb86ba27c7a558c6e4fff"}

  /api/v1/intelligent-scheduling/patients:
    get:
      tags:
        - user
      summary: Get patient priorities
      operationId: getPatientPriorities
      parameters:
        - name: limit
          in: query
          description: cursor pagination per page limit
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 100
            default: 50
          required: false
        - name: token
          in: query
          description: cursor pagination token
          schema:
            type: string
          required: false
        - name: policyId
          in: query
          description: prioritization policy override
          schema:
            type: string
          required: false
        - name: practiceId
          in: query
          description: practice id to show patients for. user must be a part of this practice or be an admin
          schema:
            type: integer
            format: int64
          required: false
        - name: userId
          in: query
          description: user id to show patients for. user must be a part of this practice or be an admin. defaults to the current user
          schema:
            type: integer
            format: int64
            description: ae2 encoded user id
          required: false
        - name: sortBy
          in: query
          description: column to sort results by. this is applied after a filter
          schema:
            type: string
        - name: priority_priority
          in: query
          description: array of priority values to filter results by
          schema:
            type: array
            items:
              type: string
              enum: ["high", "med", "low"]
              description: priority value
        - name: status
          in: query
          description: array of status values to filter results by
          schema:
            type: array
            items:
              type: string
              enum: ["0", "1", "2", "3"]
              description: status value
        - name: sort
          in: query
          description: order to sort reults by. this is applied in conjunction with `sortBy` and after a filter
          required: false
          schema:
            type: string
            enum: ["asc", "desc"]
            default: "desc"
            description: direction to sort by
      responses:
        '200':
          description: patients response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PatientPriorityResponse'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: bad_request
                description: invalid parameters
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: forbidden
                description: unable to access specified resources
  /api/v1/intelligent-scheduling/patients/{recipientId}:
    parameters:
      - name: recipientId
        in: path
        description: recipient id
        schema:
          type: string
          description: survey recipient id
        required: true
    get:
      tags:
        - user
      summary: Get patient priority
      operationId: getPatientPriority
      responses:
        '200':
          description: patient response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientPriorityResponse'
        '404':
          description: patient not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: not_found
                description: patient not found
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: forbidden
                description: unable to access specified resources
    put:
      tags:
        - user
      summary: Update patient priority
      operationId: updatePatientPriority
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - policyId
                - priority
              properties:
                policyId:
                  type: string
                  format: uuid
                  description: policy id used for computing priority
                priority:
                  type: number
                  format: double
                  description: computed patient priority
            example:
              {"policyId":"5efbb8e20e20780692fb71af","priority":0.05}
      responses:
        '200':
          description: updated patient response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientPriorityResponse'
        '404':
          description: patient not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientPriorityResponse'
              example:
                error: not_found
                description: patient not found
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: forbidden
                description: unable to access specified resources
  /api/v1/intelligent-scheduling/patients/{recipientId}/survey:
    parameters:
      - name: recipientId
        in: path
        description: recipient id
        schema:
          type: string
          description: survey recipient id
        required: true
    get:
      tags:
        - user
      summary: Get recipient survey and answers
      operationId: getSurveyAnswers
      responses:
        '200':
          description: survey answers response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SurveyQuestion'
        '404':
          description: patient not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: not_found
                description: patient not found
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: forbidden
                description: unable to access specified resources
  /api/v1/intelligent-scheduling/cancellations:
    get:
      tags:
        - user
      summary: Get cancelled cases
      operationId: getCancelledCases
      parameters:
        - name: limit
          in: query
          description: cursor pagination per page limit
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 100
            default: 50
          required: false
        - name: token
          in: query
          description: cursor pagination token
          schema:
            type: string
          required: false
        - name: ownerId
          in: query
          description: array of owner ids to show cancellations for. user must be a part of this practice or be an admin.
          schema:
            type: array
            items:
              type: integer
              format: int64
              description: ae2 encoded user id
          required: false
      responses:
        '200':
          description: patients response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cancellation'
              example:
                [
                  {
                    "calendarId": 2339453,
                    "case": "Shoulder - Not Assigned",
                    "mrn": "SS3905948393",
                    "name": "Shirley Sanders",
                    "dob": 19461021,
                    "dos": 20210726160000,
                    "duration": 60,
                    "provider": {
                      "id": 219741,
                      "name": "VDH QA Design Quality",
                      "avatar": null
                    }
                  }
                ]
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: bad_request
                description: invalid parameters
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: forbidden
                description: unable to access specified resources
  /api/v1/intelligent-scheduling/events/{calendarId}:
    parameters:
      - name: calendarId
        in: path
        description: calendar id
        schema:
          type: integer
          format: ae2 encoded
          description: calendar id
        required: true
    put:
      tags:
        - user
      summary: Rebook event
      operationId: rebookEvent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - start
                - end
              properties:
                start:
                  type: integer
                  format: datetime integer, in YmdHis format
                  description: start time to rebook event to
                  example: 20220228120000
                end:
                  type: integer
                  format: datetime integer, in YmdHis format
                  description: end time to rebook event to
                  example: 20220228133000
      responses:
        '200':
          description: succesfully rebooked event
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: bad_request
                description: invalid parameters
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: forbidden
                description: unable to access specified resources
  /rpc/v1/createSurveysFromCalendarIds:
    post:
      tags:
        - user
      summary: Bulk send surveys to patients
      operationId: createSurveysFromCalendarIds
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - calendarIds
              properties:
                calendarIds:
                  type: array
                  example: [111,222,333,444]
                  items:
                    type: integer
                    description: calendar ID to send
      responses:
        '200':
          description: succesfully send surveys
          content:
            application/json:
              schema:
                type: object
                required:
                  - surveys
                properties:
                  surveys:
                    type: array
                    items:
                      type: object
                      required:
                        - calendarId
                        - surveyId
                      properties:
                        calendarId:
                          type: integer
                          description: calendar ID of the sucessfully created survey
                          example: 111
                        surveyId:
                          type: string
                          format: uuid
                          description: survey ID of the sucessfully created survey
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: bad_request
                description: invalid parameters
        '403':
          description: forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: forbidden
                description: unable to access specified resources
components:
  securitySchemes:
    signedCookie:
      type: apiKey
      in: cookie
      name: docsperajwt
      description: docspera signed jwt cookie
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ErrorResponse:
      type: object
      required:
        - error
        - description
      properties:
        error:
          type: string
          description: error type
        description:
          type: string
          description: error_message
    PrioritizationPolicy:
      type: object
      required:
        - id
        - title
        - order
        - description
        - category
      properties:
        id:
          type: string
          description: policy id
        title:
          type: string
          description: name of policy
        order:
          type: number
          format: int32
          description: relative order
        description:
          type: string
          description: policy description
        category:
          type: string
          description: category of the policy
    ScheduleUser:
      type: object
      required:
        - id
        - name
        - practiceId
      properties:
        id:
          type: number
          format: int32
          description: user id
        name:
          type: string
          description: name
        practiceId:
          type: number
          format: int32
          description: practice id
    PatientPriorityResponse:
      type: object
      required:
        - id
        - patientId
        - calendarId
        - provider
        - name
        - dob
        - factors
        - priority
      properties:
        id:
          type: string
          length: 24
          description: survey recipient id
        patientId:
          type: integer
          format: int32
          description: docspera patient id
        calendarId:
          type: integer
          format: int32
          description: docspera calendar id
        provider:
          $ref: '#/components/schemas/Provider'
        name:
          type: string
          description: patient name
        dob:
          type: string
          format: date
          description: patient date of birth
        factors:
          type: object
          required:
            - fallRisk
            - pain
            - functionality
            - daysFromSurgery
            - bmi
            - comorbidities
            - covid
          properties:
            fallRisk:
              type: number
              format: float
            pain:
              type: number
              format: float
            functionality:
              type: number
              format: float
            daysFromSurgery:
              type: integer
              format: int32
            bmi:
              type: number
              format: float
            comorbidities:
              type: array
              items:
                type: string
            covid:
              type: boolean
        priority:
          type: object
          required:
            - policyId
            - priority
          properties:
            policyId:
              type: string
              format: uuid
              description: policy id used for computing priority
            priority:
              type: number
              format: double
              description: computed patient priority
        rebooked:
          type: object
          required:
            - date
            - timestamp
          properties:
            date:
              type: string
              format: date-time
              description: date the patient was booked for
              example: "2021-01-30T08:30:00Z"
            timestamp:
              type: string
              format: date-time
              description: timestamp the patient was rebooked in the UI
              example: "2021-01-30T08:30:00Z"
    Provider:
      type: object
      required:
        - id
        - name
        - avatar
      properties:
        id:
          type: number
          format: int32
          description: ae2 encoded user id
        name:
          type: string
          description: provider name
        avatar:
          type: string
          format: uri
          description: uri of the avatar for the user
    Cancellation:
      type: object
      required:
        - calendarId
        - provider
        - case
        - mrn
        - name
        - dob
        - dos
        - duration
      properties:
        calendarId:
          type: integer
          format: int32
          description: docspera calendar id
        provider:
          $ref: '#/components/schemas/Provider'
        name:
          type: string
          description: patient name
        mrn:
          type: string
          description: patient mrn
        case:
          type: string
          description: case title / procedure name
        dob:
          type: integer
          format: date
          description: patient date of birth, in `Ymd` format
        dos:
          type: integer
          format: date
          description: original date of surgery date of birth, in `YmdHis` format
        duration:
          type: integer
          description: duration, in minutes, of the original case booking
    SurveyQuestion:
      type: object
      required:
        - id
        - order
        - slug
        - prompt
        - input
        - response
      properties:
        id:
          type: string
          format: uuid
          description: unique question id
        order:
          type: integer
          format: int64
          description: relative order amongst siblings, lower (including negatives) is higher priority
        slug:
          type: string
          description: question slug description, useful when a question is reused on multiple surveys or for debugging
          nullable: true
        prompt:
          type: string
          description: prompt that the patient is presented with
        required:
          type: boolean
          default: false
          description: whether the question must be answered by the user or not
        input:
          oneOf:
            - $ref: '#/components/schemas/EnumeratedDropdown'
            - $ref: '#/components/schemas/RangedValueDropdown'
            - $ref: '#/components/schemas/EnumeratedRadioSelect'
            - $ref: '#/components/schemas/EnumeratedMultipleChoiceRadioSelect'
            - $ref: '#/components/schemas/NumericInput'
            - $ref: '#/components/schemas/DimensionInput'
            - $ref: '#/components/schemas/NumericRangedSliderInput'
          discriminator:
            propertyName: type
            mapping:
              enumDropdown: '#/components/schemas/EnumeratedDropdown'
              rangeDropdown: '#/components/schemas/RangedValueDropdown'
              enumRadio: '#/components/schemas/EnumeratedRadioSelect'
              enumRadioMultipleChoice: '#/components/schemas/EnumeratedMultipleChoiceRadioSelect'
              numInput: '#/components/schemas/NumericInput'
              dimensionInput: '#/components/schemas/DimensionInput'
              rangeSlider: '#/components/schemas/NumericRangedSliderInput'
        response:
          description: question response
    QuestionInput:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [enumDropdown, rangeDropdown, enumRadio, enumRadioMultipleChoice, numInput, dimInput, rangeSlider]
          description: question type. defined in the question type spec
        options:
          type: object
    EnumeratedDropdown:
      description: |
        Dropdown showing an enumerated list of options with corresponding `display => value` relationships.
        Options are arranged relative to each other based on `order` key. Lower `order` values appear first (at the top) in the list of options.
        The option with the highest priority (lowest `order` value) that contains `isDefault : true` is default selected.
        If no option is denotated as default, then the first option in the list (again, lowest `order` value) is used as default selected (this is by nature of HTML inputs as well).
        When responding, values are exactly the same type and value as the value provided from the question specification.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^enumDropdown$"
            options:
              type: object
              required:
                - enums
              properties:
                enums:
                  type: array
                  description: array of enumerated option properties
                  items:
                    type: object
                    required:
                      - display
                      - value
                      - order
                    properties:
                      display:
                        type: string
                        description: value to show in the dropdown to the user
                      value:
                        description: value to be recorded when option is selected, any type is applicable
                      order:
                        type: integer
                        format: int64
                        description: order relative to siblings, lower value is higher priority (including negatives)
                      isDefault:
                        type: boolean
                        default: false
                        description: whether the option is considered the default option
                    example:
                      display: Yes
                      value: true
                      order: 0
                      isDefault: true
      example:
        type: enumDropdown
        options:
          enumns:
            - display: ''
              value: -1
              order: 0
              isDefault: true
            - display: 'Yes'
              value: true
              order: 1
              isDefault: false
            - display: 'No'
              value: false
              order: 2
              isDefault: false
    RangedValueDropdown:
      description: |
        Dropdown showing a computed list of numerically ranged values, according the `min`, `max`, `step`, and `precision`.
        If `step` is `null` or not present, assumed value of 1.
        If `precision` is `null` or not present, no precision considerations will be made.
        Values are arranged in descending order when `order: -1`, and ascending when `order: 1`.
        The example below will produce a dropdown of values from 5-1 descending with single-digit precision.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^rangeDropdown$"
            options:
              type: object
              required:
                - min
                - max
              properties:
                min:
                  type: integer
                  format: int64
                  description: minimum value for slider
                max:
                  type: integer
                  format: int64
                  description: maximum value for slider
                step:
                  type: number
                  format: double
                  default: 1.00
                  description: steps in the slider inbetween the ranges, should fit in the specified range
                precision:
                  type: integer
                  format: int64
                  description: number of significant digits to record in the result, if null or not present no precision considerations will be made
                  nullable: true
                order:
                  type: integer
                  format: int32
                  enum: [-1, 1]
                  description: sets ascending or decending from left to right with values of 1 and -1 respectively
      example:
        type: rangeDropdown
        options:
          min: 0
          max: 5
          step: 1
          precision: 1
          order: -1
    EnumeratedRadioSelect:
      description: |
        Analogous to enumerated drop down, except displayed as radio buttons, showing an enumerated list of options with corresponding `display => value` relationships.
        When `orientation : 1`, the radio options are displayed horizantally. When `orientation : -1`, the radio options are displayed vertically.
        Options are arranged relative to each other based on `order` key. Lower `order` values appear first (at the top or left-most) in the list of options.
        The option with the highest priority (lowest `order` value) that contains `isDefault : true` is default selected.
        If no option is denotated as default, then no option is defalt selected.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^enumRadio$"
            options:
              type: object
              required:
                - enums
              properties:
                enums:
                  type: array
                  description: array of enumerated option properties
                  items:
                    type: object
                    required:
                      - display
                      - value
                      - order
                    properties:
                      display:
                        type: string
                        description: value to show in the dropdown to the user
                      value:
                        description: value to be recorded when option is selected, any type is applicable
                      order:
                        type: integer
                        format: int64
                        description: order relative to siblings, lower value is higher priority (including negatives)
                      isDefault:
                        type: boolean
                        default: false
                        description: whether the option is considered the default option
                  example:
                    - display: Yes
                      value: true
                      order: 0
                      isDefault: true
      example:
        type: enumDropdown
        options:
          enumns:
            - display: ''
              value: -1
              order: 0
              isDefault: true
            - display: 'Yes'
              value: true
              order: 1
              isDefault: false
            - display: 'No'
              value: false
              order: 2
              isDefault: false
    EnumeratedMultipleChoiceRadioSelect:
      description: |
        An extension of the Enumerated Radio Select, this allows for multiple radio options to be selected.
        `isDefault` can be defined multiple times and defines an input that is selected by default.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^enumRadioMultipleChoice$"
            options:
              type: object
              required:
                - enums
              properties:
                orientation:
                  type: integer
                  enum: [-1, 1]
                  format: int32
                  default: 1
                enums:
                  type: array
                  description: array of enumerated option properties
                  items:
                    type: object
                    required:
                      - display
                      - value
                      - order
                    properties:
                      display:
                        type: string
                        description: value to show in the dropdown to the user
                      value:
                        description: value to be recorded when option is selected, any type is applicable
                      order:
                        type: integer
                        format: int64
                        description: order relative to siblings, lower value is higher priority (including negatives)
                      isDefault:
                        type: boolean
                        default: false
                        description: whether the option is considered the default option
                    example:
                      display: Yes
                      value: true
                      order: 0
                      isDefault: true
      example:
        type: enumRadioMultipleChoice
        options:
          orientation: 1
          enumns:
            - display: ''
              value: -1
              order: 0
              isDefault: true
            - display: 'Yes'
              value: true
              order: 1
              isDefault: false
            - display: 'No'
              value: false
              order: 2
              isDefault: false
    NumericInput:
      description: |
        Records a numeric input from the user
        If `step` is `null` or not present, assumed value of 1.
        If `precision` is `null` or not present, no precision considerations will be made.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^numInput$"
            options:
              type: object
              required:
                - min
                - max
              properties:
                min:
                  type: integer
                  format: int64
                  description: minimum value for slider
                max:
                  type: integer
                  format: int64
                  description: maximum value for slider
                step:
                  type: number
                  format: double
                  default: 1.00
                  description: steps in the slider inbetween the ranges, should fit in the specified range
                precision:
                  type: integer
                  format: int64
                  description: number of significant digits to record in the result, if null or not present no precision considerations will be made
                  nullable: true
      example:
        type: numInput
        options:
          min: 0
          max: 5
          step: 1
          precision: 1
    DimensionInput:
      description: |
        Records a measurement input from the user with units.
        Units are always input in the patient's default locale (usually `imperial`). The exact unit is determined by the dimension and is delegated to the frontend.
        Units are converted to the destination unit if specified in the `recordUnit` property (`null` by defaul or not specified). Note that the conversion is transparent to the user and should not be made known. This is meerly a standardization procedure.
        Patient inputs can be split into major and minor parts (e.g. feet and inches, pounds and ounces, etc.) unless `noMajorMinor` flag is `true` (`false` by default or not
        specified).
        If `precision` is `null` or not present, no precision considerations will be made.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^dimensionInput$"
            options:
              type: object
              required:
                - min
                - max
              properties:
                min:
                  type: integer
                  format: int64
                  description: minimum value for slider
                max:
                  type: integer
                  format: int64
                  description: maximum value for slider
                step:
                  type: number
                  format: double
                  default: 1.00
                  description: steps in the slider inbetween the ranges, should fit in the specified range
                precision:
                  type: integer
                  format: int64
                  description: number of significant digits to record in the result, if null or not present no precision considerations will be made
                  nullable: true
      example:
        type: numInput
        options:
          min: 0
          max: 5
          step: 1
          precision: 1
    SliderInputLabel:
      type: object
      required:
        - primary
        - secondary
        - gradientColor
        - primaryIcon
      properties:
        primary:
          type: string
          description: primary label, usually shown on the top
          nullable: true
        secondary:
          type: string
          description: secondary label, usually shown on the bottom
          nullable: true
        gradientColor:
          type: string
          format: hex color
          pattern: "^#[0-9A-Za-z]{6}$"
          description: hex color of the gradient
          nullable: true
        primaryIcon:
          type: string
          format: url
          description: icon url for primary label
      example:
        primary: "10"
        secondary: "Most pain"
        gradientColor: "#ff0000"
        primaryIcon: "https://your.domain.com/path/to/icon.svg"
    NumericRangedSliderInput:
      description: |
        Slider showing a computed list of numerically ranged values, according the `min`, `max`, `step`, and `precision`.
        Labels are shown at three points, min value, mid way, and the max value.
        If `step` is `null` or not present, assumed value of 1.
        If `precision` is `null` or not present, no precision considerations will be made.
        Values are arranged in descending order when `order: -1`, and ascending when `order: 1`.
        The example below will produce a dropdown of values from 5-1 descending with single-digit precision.
      allOf:
        - $ref: '#/components/schemas/QuestionInput'
        - type: object
          required:
            - type
            - options
          properties:
            type:
              type: string
              pattern: "^rangeSlider$"
            options:
              type: object
              required:
                - min
                - max
                - labels
              properties:
                min:
                  type: integer
                  format: int64
                  description: minimum value for slider
                max:
                  type: integer
                  format: int64
                  description: maximum value for slider
                step:
                  type: number
                  format: double
                  default: 1.00
                  description: steps in the slider inbetween the ranges, should fit in the specified range
                precision:
                  type: integer
                  format: int64
                  description: number of significant digits to record in the result, if null or not present no precision considerations will be made
                  nullable: true
                order:
                  type: integer
                  format: int32
                  enum: [-1, 1]
                  description: sets ascending or decending from left to right with values of 1 and -1 respectively
                labels:
                  type: object
                  required:
                    - min
                    - half
                    - max
                  properties:
                    min:
                      $ref: '#/components/schemas/SliderInputLabel'
                    half:
                      $ref: '#/components/schemas/SliderInputLabel'
                    max:
                      $ref: '#/components/schemas/SliderInputLabel'
      example:
        type: rangeSlider
        options:
          min: 0
          max: 10
          step: 1
          precision: 1
          order: -1
          labels:
            min:
              primary: "1"
              secondary: "Least pain"
              gradientColor: "#00FF00"
              primaryIcon: "https://your.domain.com/path/to/icon.svg"
            half: null
            max:
              primary: "10"
              secondary: "Most pain"
              gradientColor: "#ff0000"
              primaryIcon: "https://your.domain.com/path/to/icon.svg"
